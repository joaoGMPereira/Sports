# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  # Configurações compartilhadas
  before_all do
    setup_ci if ENV['CI']  # Esta linha configura o ambiente quando executado em sistemas de CI
  end

  # Configuração de certificados com match
  lane :setup_certificates_prod do
    match(
      type: "appstore", # ou "development" dependendo do tipo de certificado
      app_identifier: ["br.com.joao.gabriel.kettleGym", "br.com.joao.gabriel.kettleGym-Dev", "br.com.joao.gabriel.zenithSample", "br.com.joao.gabriel.zenithCoreSample"],
      username: "gah.mp1@gmail.com"
    )
  end

  lane :setup_certificates_dev do
    match(
      type: "development", # ou "development" dependendo do tipo de certificado
      app_identifier: ["br.com.joao.gabriel.kettleGym", "br.com.joao.gabriel.kettleGym-Dev", "br.com.joao.gabriel.zenithSample", "br.com.joao.gabriel.zenithCoreSample"],
      username: "gah.mp1@gmail.com"
    )
  end

  # Lane para publicar KettleGym no TestFlight (com incremento automático pelo Fastlane)
  lane :publish_kettlegym_testflight do
    # Incrementar o build number
    increment_build_number(
      xcodeproj: "KettleGym/KettleGym.xcodeproj"
    )
    
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "KettleGym",
      workspace: "KettleGym.xcworkspace",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.kettleGym",
      skip_waiting_for_build_processing: true
    )
  end

  # Lane para publicar KettleGym no TestFlight (sem incremento de versão)
  lane :publish_kettlegym_testflight_no_increment do
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "KettleGym",
      workspace: "KettleGym.xcworkspace",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.kettleGym",
      skip_waiting_for_build_processing: true
    )
  end

  # Lane para publicar ZenithSample no TestFlight (com incremento automático pelo Fastlane)
  lane :publish_zenithsample_testflight do
    # Incrementar o build number
    increment_build_number(
      xcodeproj: "Packages/ZenithSample/ZenithSample.xcodeproj"
    )
    
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "ZenithSample",
      project: "Packages/ZenithSample/ZenithSample.xcodeproj",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.zenithSample",
      skip_waiting_for_build_processing: true
    )
  end

  # Lane para publicar ZenithSample no TestFlight (sem incremento de versão)
  lane :publish_zenithsample_testflight_no_increment do
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "ZenithSample",
      project: "Packages/ZenithSample/ZenithSample.xcodeproj",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.zenithSample",
      skip_waiting_for_build_processing: true
    )
  end

  # Lane para publicar ZenithCoreSample no TestFlight (com incremento automático pelo Fastlane)
  lane :publish_zenithcoresample_testflight do
    # Incrementar o build number
    increment_build_number(
      xcodeproj: "Packages/ZenithCoreSample/ZenithCoreSample.xcodeproj"
    )
    
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "ZenithCoreSample",
      project: "Packages/ZenithCoreSample/ZenithCoreSample.xcodeproj",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.zenithCoreSample",
      skip_waiting_for_build_processing: true
    )
  end

  # Lane para publicar ZenithCoreSample no TestFlight (sem incremento de versão)
  lane :publish_zenithcoresample_testflight_no_increment do
    # Construir e publicar para o TestFlight
    build_app(
      scheme: "ZenithCoreSample",
      project: "Packages/ZenithCoreSample/ZenithCoreSample.xcodeproj",
      export_method: "app-store",
      output_directory: "./builds",
      clean: true
    )
    
    # Fazer upload para o TestFlight
    upload_to_testflight(
      app_identifier: "br.com.joao.gabriel.zenithCoreSample",
      skip_waiting_for_build_processing: true
    )
  end
end
